replicaCount: 2
image:
  # TODO: point to the correct ECR repository and tag
  repository: ECR_REGISTRY/ping-pong-api
  pullPolicy: IfNotPresent
  tag: "GITHUB_SHA"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  annotations:
    # TODO: Replace with the actual IAM role ARN
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/ping-pong-api-role
  name: ""
podAnnotations: {}

podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 80
  targetPort: 3000

ingress:
  enabled: true
  className: "alb"
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    # TODO: account ID
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:ACCOUNT_ID:certificate/cert-arn
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/healthcheck-path: /ping
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
  hosts:
    - host: ping-pong-api.biconomy.io
      paths:
        - path: /
          pathType: Prefix
  tls: []
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - ping-pong-api
        topologyKey: kubernetes.io/hostname

topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: ping-pong-api
env:
  PORT: "3000"
  NODE_ENV: "production"
  AWS_REGION: "eu-central-1"

startupProbe:
  httpGet:
    path: /ping
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6

livenessProbe:
  httpGet:
    path: /ping
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /ping
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 3

networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: aws-load-balancer-controller
      - namespaceSelector:
          matchLabels:
            name: kube-system
      ports:
      - protocol: TCP
        port: 3000
  egress:
    # DNS resolution
    - to: [ ]
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # HTTPS outbound traffic
    - to: [ ]
      ports:
        - protocol: TCP
          port: 443
    # HTTP outbound traffic
    - to: [ ]
      ports:
        - protocol: TCP
          port: 80
aws:
  loadBalancerController:
    enabled: true
  secretsManager:
    enabled: false
    secretArn: ""
  cloudWatch:
    enabled: true
    logGroup: "/aws/eks/ping-pong-api"

volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache
  - name: var-log
    mountPath: /var/log

volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
  - name: var-log
    emptyDir: {}

# TODO: serviceMonitor for monitoring with prometheus