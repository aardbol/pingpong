name: CI/CD Pipeline for AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  EKS_CLUSTER_NAME: ping-pong-cluster
  ECR_REPOSITORY: ping-pong-api
  IMAGE_TAG: ${{ github.sha }}
  HELM_CHART_PATH: ./helm/ping-pong-api
  DOCKERFILE_PATH: Dockerfile
  APP_HOSTNAME: ping-pong-api.biconomy.io


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm test || echo "No tests found, skipping"

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update kube config
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.0'

    - name: Install AWS Load Balancer Controller (if not exists)
      run: |
        # Check if AWS Load Balancer Controller is already installed
        if ! helm list -n kube-system | grep -q aws-load-balancer-controller; then
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          # Get VPC ID and create IAM role for ALB controller
          VPC_ID=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME --query "cluster.resourcesVpcConfig.vpcId" --output text)

          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=$EKS_CLUSTER_NAME \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set vpcId=$VPC_ID
        fi

    - name: Deploy to EKS
      run: |
        ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com

        helm upgrade --install ping-pong-api $HELM_CHART_PATH \
          --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY \
          --set image.tag=$IMAGE_TAG \
          --set ingress.hosts[0].host=ping-pong-${IMAGE_TAG::7}.biconomy.io.com \
          --wait \
          --timeout=10m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/ping-pong-api --timeout=300s
        kubectl get pods -l app.kubernetes.io/name=ping-pong-api

        kubectl port-forward service/ping-pong-api 8080:80 &
        sleep 10
        curl -f http://localhost:8080/ping || exit 1
        echo "‚úÖ Deployment verification successful"

    - name: Get LoadBalancer URL
      run: |
        echo "üåê Getting LoadBalancer URL..."
        kubectl get ingress ping-pong-api -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo ""
        echo "Application will be available at the above URL once DNS propagates"

  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        run: helm rollback ping-pong-api